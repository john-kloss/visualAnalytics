Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
names(student)
names(student)[1]
Gini(test$names(student[1]))
Gini(test$i
)
Gini(test$i)
quote(student)
Gini(test$quote(i))
eval(i)
Gini(test$eval(i))
Gini(student[,eval(i))
Gini(student[,eval(i)])
Gini(student[,i])
student[,i]
student[[i]]
Gini(student[[i]])
var = colnames(student)
var = colnames(student)[1]
Gini(student[[var]])
Gini(student[[eval(var)]])
var = quote(colnames(student))
var = colnames(student)[1]
eval(var)
var
Gini(student[,var])
Gini(student[[var]])
student[[var]]
student[[sex]]
student[["sex"]]
student[,sex]
student[,age]
student[,"age"]
student[,var]
student[,eval(var)]
Gini(test$sex)
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
Gini(student$sex)
s
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
student <- read_csv(str_c(dirname(getwd()), "/visualAnalytics/Data/student_alc.csv"))
student <- student %>%
mutate(alc_prob = ifelse(Dalc + Walc >= 6, "alc_p", "no_alc_p"))
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
Gini(student$sex)
for(col in names(student)){
print(col)
print(Gini(student[[col]]))
}
Gini(filter(student, sex==1))
Gini(filter(student, sex==1)$sex)
Gini(filter(student, sex==1)$alc_prob)
Gini(filter(student, sex==2)$alc_prob)
Gini(student$alc_prob)
gini_alc <- 1 - ((nrow(filter(student, alc_prob=="alc_p"))/nrow(student))^2 + (nrow(filter(student, alc_prob=="no_alc_p"))/nrow(student))^2)
student <- read_csv(str_c(dirname(getwd()), "/visualAnalytics/Data/student_alc.csv"))
student <- student %>%
mutate(alc_prob = ifelse(Dalc + Walc >= 6, "alc_p", "no_alc_p"))
gini_alc <- 1 - ((nrow(filter(student, alc_prob=="alc_p"))/nrow(student))^2 + (nrow(filter(student, alc_prob=="no_alc_p"))/nrow(student))^2)
Gini(student$sex)
Gini(student$Medu)
Gini(student$Medu, parameter=0.5)
nrow(filter(student, sex=="M"))
nrow(filter(filter(student, alc_prob=="alc_p"), sex=="M"))
nrow(filter(filter(student, alc_prob=="no_alc_p"), sex=="M"))
nrow(filter(filter(student, alc_prob=="no_alc_p"), sex=="F"))
nrow(filter(filter(student, alc_prob=="alc_p"), sex=="F"))
nrow(filter(student, sex=="F"))
nrow(student)
Gini(student)
Gini(student$alc_prob)
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
Gini(student$alc_prob)
Gini(student$)
Gini(student)
Gini(student$alc_prob)
Gain(filter(student, sex=="M"))
Gini(filter(student, sex=="M"))
Gini(filter(student, sex=="M")$alc_prob)
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
Gini(filter(student, sex=="M")$alc_prob)
filter(student, sex=="M")
filter(student, sex=="1")
Gini(filter(student, sex=="1")$alc_prob)
for(a in levels(factor(col))){
print(a)
}
levels(student$alc_prob)
levels(factor(student$alc_prob))
student[[a]]
for(a in levels(factor(col))){
student[[a]]
}
student[[a]]
levels(factor(col))
levels(factor(student[[col]]))
for(a in levels(factor(student[[col]]))){
}
filter(student,col=a)
filter(student,col==a)
filter(student,col==1)
filter(student,sex==1)
filter(student, sex==a[1])
filter(student, sex==a[2])
filter(student, sex==a[0])
filter(student, sex==a[1])
filter(student, sex==a[2])
a#
a
filter(student, sex==a)
a <- 1
filter(student, sex==a)
filter(student, col==a)
filter(student, student[[col]]==a)
filter(student, student[[col]]==1)
filter(student, student[[sex]]==1)
filter(student, student[["sex"]]==1)
student[[col]]
col
col <- sex
col <- "sex"
filter(student, student[[col]]==1)
nrow(filter(student, student[[col]]==a))
nrow(filter(student, student[[col]]==a))/nrow(student)
a <- 2
nrow(filter(student, student[[col]]==a))/nrow(student)
for(a in levels(factor(student[[col]]))){
gini <- gini + (nrow(filter(student, student[[col]]==a))/nrow(student))^2
}
gini <- gini + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a))/nrow(filter(student, student[[col]]==a))))^2
gini <- gini + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a))/nrow(filter(student, student[[col]]==a))))^2
nrow(filter(filter(student, alc_prob==1, student[[col]]==a)
)
)
gini <- gini + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2
gini <- vec()
gini <- 0
gini <- gini + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2
gini <- (nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2
gini <- 1 - (nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2
nrow(filter(student, sex="M"))
nrow(filter(student, sex=="M"))
nrow(filter(student, sex=="1"))
nrow(filter(student, student[[col]]=="1"))
nrow(filter(student, student[[col]]==a))
gini <- 0
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - (nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- 1-gini
print(gini)
gini <- gini_alc-gini
print(gini)
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - (nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini_alc <- 1 - ((nrow(filter(student, alc_prob=="alc_p"))/nrow(student))^2 + (nrow(filter(student, alc_prob=="no_alc_p"))/nrow(student))^2)
gini_alc <- 1 - ((nrow(filter(student, alc_prob=="1"))/nrow(student))^2 + (nrow(filter(student, alc_prob=="2"))/nrow(student))^2)
# Aufgabe 1
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
gini_alc <- 1 - ((nrow(filter(student, alc_prob=="1"))/nrow(student))^2 + (nrow(filter(student, alc_prob=="2"))/nrow(student))^2)
for(col in names(student)){ #iterate over columns
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - (nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
print(gini)
}
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
gini <- 0
col <- "sex"
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
for(col in names(student)){ #iterate over columns
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
print(gini)
}
print(col)
for(col in names(student)){ #iterate over columns
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
print(col)
print(gini)
}
results <- c(results, gini, col)
results <- vector()
for(col in names(student)){ #iterate over columns
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
results <- c(results, gini, col)
}
results
results <- vector()
for(col in names(student)){ #iterate over columns
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
results <- c(results, gini)
}
results
order(results)
max(order(results))
sort(results)
student[[31]]
student[,32]
student[0,32]
order(results)
student[0,27]
student[0,27]
student[0,32]
student[0,27]
order(results)
student[0,25]
student[0,24]
student[0,33]
student[0,8]
student[0,28]
install.packages("tree")
library(tree)
student <- read_csv(str_c(dirname(getwd()), "/visualAnalytics/Data/student_alc.csv"))
?tree
fit <- tree(alc_prob, data = student)
fit <- tree(student$alc_prob, data = student)
fit <- tree(alc_prob ~ sex , data = student)
fit <- tree(student$alc_prob ~ sex , data = student)
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
library(stringr)
library(readr)
library(dplyr)
library(ineq)
# (Pfad anpassen)
student <- read_csv(str_c(dirname(getwd()), "/visualAnalytics/Data/student_alc.csv"))
student <- student %>%
mutate(alc_prob = ifelse(Dalc + Walc >= 6, "alc_p", "no_alc_p"))
# Aufgabe 1
student <- mutate(student, sex = as.numeric(factor(sex)),
famsize = as.numeric(factor(famsize)),
Pstatus = as.numeric(factor(Pstatus)),
Mjob = as.numeric(factor(Mjob)),
Fjob = as.numeric(factor(Fjob)),
reason = as.numeric(factor(reason)),
guardian = as.numeric(factor(guardian)),
schoolsup = as.numeric(factor(schoolsup)),
internet = as.numeric(factor(internet)),
paid = as.numeric(factor(paid)),
activities = as.numeric(factor(activities)),
nursery = as.numeric(factor(nursery)),
higher = as.numeric(factor(higher)),
romantic = as.numeric(factor(romantic)),
famsup = as.numeric(factor(famsup)),
alc_prob = as.numeric(factor(alc_prob)))
gini_alc <- 1 - ((nrow(filter(student, alc_prob=="1"))/nrow(student))^2 + (nrow(filter(student, alc_prob=="2"))/nrow(student))^2)
results <- vector()
for(col in names(student)){ #iterate over columns
gini <- 0
for(a in levels(factor(student[[col]]))){ #iterate over levels
gini <- gini + (1 - ((nrow(filter(filter(student, alc_prob==2, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2 + (nrow(filter(filter(student, alc_prob==1, student[[col]]==a)))/nrow(filter(student, student[[col]]==a)))^2)) *
nrow(filter(student, student[[col]]==a)) / nrow(student)
}
gini <- gini_alc-gini
results <- c(results, gini)
}
order(results)
# alc_prob, health, Dalc, goout, absences
library(tree)
fit <- tree(alc_prob ~ sex , data = student)
?tree
plot(fit)
fit <- tree(alc_prob , data = student)
plot(fit)
fit <- tree(student ~ sex , data = student)
fit <- tree(alc_prob ~ sex + age , data = student)
plot(fit)
fit <- tree(alc_prob ~ sex + age + Medu , data = student)
plot(fit)
fit <- tree(alc_prob ~  Medu , data = student)
plot(fit)
fit <- tree(alc_prob ~  Medu , data = student)
plot(fit)
sex + age +
sex + age +
plot(fit)
fit <- tree(alc_prob ~ sex + age + Medu , data = student)
plot(fit)
fit <- tree(alc_prob +famsize ~ sex + age + Medu , data = student)
plot(fit)
text(fit, cex = 1.5)
fit <- tree(alc_prob ~ sex + age + Medu , data = student)
plot(fit)
text(fit, cex = 1.5)
fit <- tree(alc_prob ~ sex , data = student)
plot(fit)
fit$n
fit
fit <- tree(alc_prob ~ sex +age , data = student)
plot(fit)
fit
mean(student$age)
fit <- tree(alc_prob ~ sex +age +famsize, data = student)
plot(fit)
plot(fit)
fit
fit <- tree(alc_prob ~ sex +age +famsize, data = student)
plot(fit)
fit
fit <- tree(sex ~ sex +age +famsize, data = student)
plot(fit)
fit
fit <- tree(alc_prob +age ~ sex +age +famsize, data = student)
plot(fit)
fit
fit <- tree(alc_prob +age ~ sex, data = student)
plot(fit)
fit
fit <- tree(alc_prob ~ sex +age , data = student)
plot(fit)
fit <- tree(alc_prob +age ~ sex +age , data = student)
plot(fit)
fit <- tree(alc_prob +age ~ sex  , data = student)
plot(fit)
+age
+age
fit <- tree(alc_prob +age ~ sex +age , data = student)
plot(fit)
fit
colnames(student)
fit <- tree(alc_prob ~ sex, age, famsize , data = student)
plot(fit)
fit <- tree(alc_prob ~ sex+ age+ famsize , data = student)
plot(fit)
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu, data = student)
plot(fit)
fit
colnames(student)
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup, data = student)
plot(fit)
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup+famsup+paid+activities+nursery+higher+internet+romantic+famrel+freetime+goout+Dalc+Walc+health+absences+G1+G2+G3, data = student)
plot(fit)
fit
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup+famsup+paid+activities+nursery+higher+internet+romantic+famrel+freetime+goout+Dalc+Walc+health+absences+G1+G2+G3, data = student, method = "recursive.partition")
plot(fit)
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup+famsup+paid+activities+nursery+higher+internet+romantic+famrel+freetime+goout+Dalc+Walc+health+absences+G1+G2+G3, data = student, x=TRUE)
plot(fit)
fit
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup+famsup+paid+activities+nursery+higher+internet+romantic+famrel+freetime+goout+Dalc+Walc+health+absences+G1+G2+G3, data = student, x=TRUE)
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup+famsup+paid+activities+nursery+higher+internet+romantic+famrel+freetime+goout+Dalc+Walc+health+absences+G1+G2+G3, data = student, control=tree.control(minsize = 20))
fit <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup+famsup+paid+activities+nursery+higher+internet+romantic+famrel+freetime+goout+Dalc+Walc+health+absences+G1+G2+G3, data = student, control=tree.control(nobs = nrow(student), minsize = 20))
plot(fit)
fit
pred <- predict(fit)
pred
pred <- predict(fit1)
fit1 <- tree(alc_prob ~ sex+ age+ famsize +Pstatus+Medu+Fedu+Mjob+Fjob+reason+guardian+traveltime+studytime+failures+schoolsup+famsup+paid+activities+nursery+higher+internet+romantic+famrel+freetime+goout+Dalc+Walc+health+absences+G1+G2+G3, data = student)
plot(fit1)
pred <- predict(fit1)
createDataPartition(y = student$alc_prob, p = 0.5)
library(caret)
pred <- predict(fit1)
createDataPartition(y = student$alc_prob, p = 0.5)
createDataPartition(y = student$alc_prob, p = 0.7)
?predict
