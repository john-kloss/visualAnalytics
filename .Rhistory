knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
clust <- kmeans(iris %>% select(-Species), centers=3)
clust <- kmeans(dat %>% select(x), centers=3)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
clust <- kmeans(dat %>% select(x), centers=3)
plot(clust)
clust$centers
?kmeans
clust <- kmeans(dat %>% select(x), c(1.0,2.0,3.0))
clust <- kmeans(dat %>% select(x), (1.0,2.0,3.0))
clust <- kmeans(dat %>% select(x), c(1.0,2.0,3.0))
clust <- kmeans(dat %>% select(x), c(c(1.0,2.0),c(3.0,1.0)))
clust <- kmeans(dat %>% select(x), c(c(1.0,2.0),c(1.0,1.0)))
clust <- kmeans(dat %>% select(x), c(1.0,2.0),c(1.0,1.0))
clust <- kmeans(dat %>% select(x), centers=c(1.0,2.0),c(1.0,1.0))
clust <- kmeans(dat %>% select(x), centers=c(1.0,2.0,3.0))
clust <- kmeans(dat %>% select(x), centers=2)
a <- c(2,1)
a <- matrix(2,1)
View(a)
clust <- kmeans(dat %>% select(x), c(2,1), c(3,1.5))
a <- c(2,1)
a <- c(2,1)
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
install.packages("fields")
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
K<-1
i<-0
centers<- dat[c((K+i):(K+i+2)),1:2]
euc<-rdist(centers,dat)
size<-which(euc==min(euc))
euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
centers<-centers %>% sum(select(col(euc), cluster=factor(euc$cluster)))
View(centers)
centers<- dat[c((K+i):(K+i+2)),1:2]
# Lösung zu Aufgabe 3...
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
#windows()
plot(si)
}
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.90, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
# Lösung zu Aufgabe 2...
student <- read_csv(str_c(dirname(getwd()), "/visualAnalytics/Data/clustering-student-mat.csv"))
centers<- dat[c((1+i):(1+i+2)),1:2]
centers<- dat[c((1):(1+2)),1:2]
centers<- dat[c((1):(3)),1:2]
centers<- dat[c((1):(3))]
,1:2
1+2
centers<- dat[c((1):(1+2)),1:2]
centers<- dat[c((1):(1+2)),1:2]
centers<- dat[c((1):(1+2)),1:2]
View(centers)
centers<- dat[c((1):(1+2))]
centers<- dat[c((1):(3)),1:2]
centers<- dat[c(1:3),1:2]
View(centers)
centers<- dat[1:3,1:2]
centers<- dat[1:3,1:2]
dat[1:2,1:2]
View(centers)
centers<- dat[1:3,1:2]
euc<-rdist(centers,dat)
View(euc)
euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
View(euc)
centers<-centers %>% sum(select(col(euc), cluster=factor(euc$cluster)))
View(dat)
centers<- dat[1:3,1:2]
euc<-rdist(centers,dat)
View(euc)
?rdist
size<-which(euc==min(euc))
?rbind
euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
centers<-centers %>% sum(select(col(euc), cluster=factor(euc$cluster)))
View(euc)
fitler(euc, cluster=1)
filter(euc, cluster=1)
select(col(euc), cluster=1)
select(col(euc), cluster=factor(euc$cluster))
centers<- dat[1:3,1:2]
euc<-rdist(centers,dat)
euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
filter(euc)
filter(euc$V1)
euc$V!1
euc$V1
euc
dat <- rbind(dat, cluster=(1,1,1,1,1,1,1,1,1,1,1,1,1,1))
dat <- rbind(dat, cluster=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
dat <- cbind(dat, cluster=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1))
dat <- cbind(dat, cluster=c(1,1,1,1,1,1,1,1,1,1,1,1,))
dat <- cbind(dat, cluster=c(1,1,1,1,1,1,1,1,1,1,1,1,1))
dat <- cbind(dat, cluster=c(1,1,1,1,1,1,1,1,1,1,1,2,3))
dat <- cbind(dat, cluster=c(1,1,1,1,1,1,1,1,1,1,1,2))
rdist(centers, dat)
rdist(dat, centers)
apply(rdist(dat,centers),1,which.min)
apply(rdist(dat,centers),2,which.min)
apply(rdist(dat,centers),1,which.min)
dat <- dat %>% cbind(apply(rdist(dat,centers),1,which.min))
View(dat)
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
euc<-rdist(centers,dat)
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
filter(dat, cluster=1)
filter(dat, cluster==1)
sum(filter(dat, cluster==1)$x)
sum(filter(dat, cluster==1)$x)/nrow(filter(dat,cluster==1))
filter(dat, cluster==1) %>% sum()
filter(dat, cluster==1) %>% sum($x)
filter(dat, cluster==1) %>% sum(x)
filter(dat, cluster==1) %>% sum()
filter(dat, cluster==1) %>% sum(this)
filter(dat, cluster==1)$cluster %>% sum()
filter(dat, cluster==1)$x %>% sum()
filter(dat, cluster==1)$x %>% sum()/nrow()
current <- filter(dat, cluster==1)
sum(current$x)
sum(current$x)/nrow(current)
centers$1
centers$x
centers(1)
centers[1]
centers[0]
centers[2]
centers[2,0]
centers[1,0]
centers[1,1]
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
for(i in 1:3){
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(cuttent$x)/nrow(current)
}
for(i in 1:3){
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(current$x)/nrow(current)
}
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
```{r}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
for(i in 1:3){
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(current$x)/nrow(current)
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
for(i in 1:3){
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(current$x)/nrow(current)
}
for(i in 1:3){
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(current$x)/nrow(current)
}
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
View(dat)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(current$x)/nrow(current)
View(centers)
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
?mutate
mutate(dat, cluster=(4,4))
mutate(dat, cluster=c(4,4))
mutate(dat, cluster=c(4,4,1,1,1,1,1,1,1,1,1,1))
apply(rdist(dat,centers),1,which.min)
dat <- cbind(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
centers<- dat[1:3,1:2]
#euc<-rdist(centers,dat)
#size<-which(euc==min(euc))
#euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
for(i in 1:3){
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(current$x)/nrow(current)
}
#centers<-centers %>% sum(select(col(euc), cluster=factor(euc$cluster)))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
for(i in 1:3){
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,i] <- sum(current$x)/nrow(current)
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
View(current)
centers[i,i] <- sum(current$x)/nrow(current)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
centers<- dat[1:3,1:2]
#euc<-rdist(centers,dat)
#size<-which(euc==min(euc))
#euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
for(i in 1:3){
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[1,i] <- sum(current$x)/nrow(current)
centers[2,i] <- sum(current$y)/nrow(current)
}
#centers<-centers %>% sum(select(col(euc), cluster=factor(euc$cluster)))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
centers<- dat[1:3,1:2]
#euc<-rdist(centers,dat)
#size<-which(euc==min(euc))
#euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
for(i in 1:3){
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
#centers<-centers %>% sum(select(col(euc), cluster=factor(euc$cluster)))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
centers<- dat[1:3,1:2]
#euc<-rdist(centers,dat)
#size<-which(euc==min(euc))
#euc<-rbind(euc,cluster=(apply(euc,2,which.min)))
for(i in 1:3){
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
#centers<-centers %>% sum(select(col(euc), cluster=factor(euc$cluster)))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
centers<- dat[1:3,1:2]
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
View(dat)
current <- filter(dat, cluster==i)
current <- filter(dat, cluster==1)
sum(current$x)/nrow(current)
centers[1,1] <- sum(current$x)/nrow(current)
centers[1,2] <- sum(current$y)/nrow(current)
i<-2
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
i=3
dat <- mutate(dat,cluster=(apply(rdist(dat,centers),1,which.min)))
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgefÃ¼hrt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# LÃ¶sung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print(rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) +  scale_colour_gradientn(colours=rainbow(4))
