fitb$residuals
fitb$residuals > 100
fitb$residuals[0]
fitb$residuals[1]
fitb$residuals[2]
for(i in (1:88)){
if(fitb$residuals[i] > 100)
print(i)
}
for(i in (1:88)){
if(fitb$residuals[i] > 100 | fitb$residuals < 100)
print(i)
}
for(i in (1:88)){
if(fitb$residuals[i] > 100 | fitb$residuals < -100)
print(i)
}
for(i in (1:88)){
if(fitb$residuals[i] > 100 | fitb$residuals < -100)
print(i)
if(fitl$residuals[i] > 100 | fitb$residuals < -100)
print(i)
if(fits$residuals[i] > 100 | fitb$residuals < -100)
print(i)
if(fitc$residuals[i] > 100 | fitb$residuals < -100)
print(i)
}
print(paste0("b: ",i))
for(i in (1:88)){
if(fitb$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("b: ",i))
if(fitl$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("l: ",i))
if(fits$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("s: ",i))
if(fitc$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("c: ",i))
}
for(i in (1:88)){
if(fitb$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("b: ",i))
if(fitl$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("l: ",i))
if(fits$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("s: ",i))
if(fitc$residuals[i] > 100 | fitb$residuals < -100)
print(paste0("c: ",i))
}
?predict
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(e1071)
predict(bayes)
bayes <- e1071::naiveBayes(training, training$type)
predict(bayes)
spamspam <- filter(spam, type=="spam")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(e1071)
spamspam <- filter(spam, type=="spam")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(e1071)
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(e1071)
spamspam <- filter(spam, type=="spam")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(e1071)
spamspam <- filter(spam, type=="spam")
spamspam <- filter(spam, type=="spam")
spam <- read.csv(str_c(dirname(getwd()), "/visualAnalytics/Data/spam.csv"))
nrow(filter(spam, spam$type=="ham"))
nrow(filter(spam, spam$type=="spam"))
spam <- mutate(spam, text=as.character(text))
spam <- spam %>%
tidytext::unnest_tokens(word, text)
spamJoin <- spam %>%
anti_join(tidytext::stop_words, by = "word")
spamspam <- filter(spam, type=="spam")
spamham <- filter(spam, type=="ham")
training <- spamspam[(1:round(nrow(spamspam)*0.7)),]
training <- rbind(training, spamham[(1:round(nrow(spamham)*0.7)),])
test <- spamspam[((round(nrow(spamspam)*0.7))+1):nrow(spamspam),]
test <- rbind(test, spamham[((round(nrow(spamham)*0.7))+1):nrow(spamham),])
bayes <- e1071::naiveBayes(training, training$type)
predict(bayes)
predict(bayes, newdata = spam$type)
bayes
predict(bayes, newdata = bayes$levels)
predict(bayes, newdata = bayes$levels)
pred <- predict(bayes, newdata = bayes$levels)
pred <- predict(bayes, newdata = spam$levels)
pred <- predict(bayes, newdata = spam$type)
pred <- predict(bayes, newdata = spam$type)
pred <- predict(bayes, newdata = bayes$levels)
bayes$tables
bayes <- e1071::naiveBayes(training$type)
pred <- predict(bayes, spam$type)
predict(bayes, spam$type)
bayes <- e1071::naiveBayes(training, test)
predict(bayes, spam$type)
predict(bayes, spam$type)[,80000]
pred <- predict(bayes, spam$type)
pred[1,]
pred[1]
pred[80000]
pred[84000]
pred[800]
pred[82300]
confusion.matrix(pred)
install.packages("SDMTools")
library(SDMTools)
confusion.matrix(pred)
confusion.matrix(bayes, pred)
install.packages("caret")
library(caret)
confusionMatrix(pred, reference=test$type)
pred <- predict(bayes, test$type)
pred <- predict(bayes, test$type)
confusionMatrix(pred, reference=test$type)
spam <- read.csv(str_c(dirname(getwd()), "/visualAnalytics/Data/UNVotes.rds"))
votes
votes <- read.csv(str_c(dirname(getwd()), "/visualAnalytics/Data/UNVotes.rds"))
View(votes)
votes <- readRDS(str_c(dirname(getwd()), "/visualAnalytics/Data/UNVotes.rds"))
View(votes)
filter(votes, date==1946)
filter(votes, date==1/1/1946)
filter(votes, date=="1/1/1946")
filter(votes, date==grepl("1946"))
filter(votes, date==grepl("1946",date))
grepl("1946",votes$date[1])
filter(votes, grepl("1946",date[1]))
filter(votes, grepl("1946",date))
a <- 0
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
a
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
a
nrow(filter(votes, grepl(1946,date)))
plot(a)
plot(a, type = l)
plot(a, type = "l")
a <- 0
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
plot(a, type = "l")
legend(1:20000,1946:2014)
plot(a, type = "l")
legend(1:20000,1946:2014)
ggplot(a, type = "l")
title("Tree Growth", "example of line plot")
plot(a, type = "l")
title("Tree Growth", "example of line plot")
legend(1:20000,1946:2014)
plot(a, type = "l") %>%
legend(1:20000,1946:2014)
yrange <- 1:2
plot(a, type = "l")
yrange <- 1:2
plot(a, 1946:2014, type = "l")
plot(a, xlabel = 1946:2014, type = "l")
plot(a, 1946:2014, type = "l")
plot( 1946:2014,a, type = "l")
plot( 1:70,a, type = "l")
2014-1946
plot( 1946:2015,a, type = "l")
max(a)
a
which(a == 0)
which(a == max(a))
which(a == max(a))
1946+41
nrow(filter(votes, grepl("1987",date)))
max(a)
nrow(filter(votes, grepl("1987",date)))
1946+42
nrow(filter(votes, grepl("1988",date)))
nrow(filter(votes, grepl("1986",date)))
1946+which(a == max(a)-2)
1946+which(a == max(a))-2
us <- filter(votes, country="United States of America")
us <- filter(votes, country=="United States of America")
ger <- filter(votes, country=="Federal Republic of Germany" | country=="Germany")
View(ger)
View(us)
i = 1973
currus <- filter(us, grepl(i,date))
currger <- filter(ger, grepl(i,date))
currus[1,1]
filter(currger, rcid==currus[1,1])$vote
filter(currger, rcid==currus[1,1])
filter(currger, rcid==currus[1,1])
View(currus)
View(currger)
currus[1,1]
filter(curger, rcid==1412)
filter(currger, rcid==1412)
filter(currger, rcid==currus[1,1])
currus[4,ยน]
currus[4,1]
currus[4,1]
filter(currger, rcid==currus[1,1])
currus[2,1]
currus[id,1]
id = 1412
currus[id,1]
filter(currus, rcid=id)
filter(currus, rcid==id)
filter(currus, rcid==id)[1,3]
filter(currus, rcid==id)[1,3]
filter(curger, rcid==id)[1,3]
currger <- filter(ger, grepl(i,date))
filter(curger, rcid==id)[1,3]
filter(currus, rcid==id)[1,3]
filter(currger, rcid==id)[1,3]
if(filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3]){
print("ja")
}
filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3]
id = 1414
filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3]
if(filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
if(filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3]){
print("ja")
}
results <- 0
results <- vector()
results <- vector()
for(id in currus[1,1]:currus[nrow(currus),1]){
results <- c(a,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
currus[1,1]
currus[1,1]
currus[nrow(currus),1]
currus[1,1]:currus[nrow(currus),1]
(currus[1,1]:currus[nrow(currus),1])
for(id in 1:nrow(currus)){
id = currus[id,1]
results <- c(a,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
for(id in 1:nrow(currus)){
id = currus[id,1]
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
results <- vector()
for(id in 1:nrow(currus)){
id = currus[id,1]
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
results
results <- vector()
for(j in 1:nrow(currus)){
id = currus[j,1]
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
results
1:nrow(currus)
currus[1,1]
currus[2,1]
filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3]
filter(currus, rcid==id)[1,3]
id
id[1,1]
filter(currus, rcid==id)[1,3]
filter(currus, rcid==1505)[1,3]
filter(currus, rcid==id)[1,3]
id <- currus[j,1]
for(j in 1:nrow(currus)){
id <- currus[j,1]
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
nrow(currus)
results <- vector()
for(j in 1:nrow(currus)){
id <- currus[j,1]
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
filter(currus, rcid==1505)[1,3]
filter(currus, rcid==id)[1,3]
id <- 1505
filter(currus, rcid==id)[1,3]
id <- currus[j,1]
currus[1,1]
as.numeric(currus[1,1])
for(j in 1:nrow(currus)){
id <- as.numeric(currus[j,1])
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
results <- vector()
for(j in 1:nrow(currus)){
id <- as.numeric(currus[j,1])
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
length(results[TRUE])
sum(results, na.rm=TRUE)
sum(results, na.rm=TRUE)
sum(results, na.rm=FALSE)
sum(results, na.rm==FALSE)
length(which(results==TRUE))
length(which(results==FALSE))
i <- 2014
currus <- filter(us, grepl(i,date))
currger <- filter(ger, grepl(i,date))
for(j in 1:nrow(currus)){
id <- as.numeric(currus[j,1])
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
length(which(results==TRUE))
length(which(results==FALSE))
results <- vector()
currus <- filter(us, grepl(i,date))
currger <- filter(ger, grepl(i,date))
for(j in 1:nrow(currus)){
id <- as.numeric(currus[j,1])
results <- c(results,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
length(which(results==TRUE))
length(which(results==FALSE))
length(which(results==TRUE))/length(which(results==FALSE))
length(which(results==TRUE))/nrow(currus)
votes <- readRDS(str_c(dirname(getwd()), "/visualAnalytics/Data/UNVotes.rds"))
a <- 0
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
2014-1946
plot(1946:2015, a, type = "l")
max(a)
1946+which(a == max(a))-2
us <- filter(votes, country=="United States of America")
ger <- filter(votes, country=="Federal Republic of Germany" | country=="Germany")
tmp <- vector()
results <- vector()
for(i in 1973:2014){
currus <- filter(us, grepl(i,date))
currger <- filter(ger, grepl(i,date))
for(j in 1:nrow(currus)){
id <- as.numeric(currus[j,1])
tmp <- c(tmp,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
results <- length(which(tmp==TRUE))/nrow(currus)
tmp <- vector()
}
votes <- readRDS(str_c(dirname(getwd()), "/visualAnalytics/Data/UNVotes.rds"))
a <- 0
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
2014-1946
plot(1946:2015, a, type = "l")
max(a)
1946+which(a == max(a))-2
us <- filter(votes, country=="United States of America")
ger <- filter(votes, country=="Federal Republic of Germany" | country=="Germany")
tmp <- vector()
results <- vector()
for(i in 1973:2014){
currus <- filter(us, grepl(i,date))
currger <- filter(ger, grepl(i,date))
for(j in 1:nrow(currus)){
id <- as.numeric(currus[j,1])
tmp <- c(tmp,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
results <- c(results,length(which(tmp==TRUE))/nrow(currus))
tmp <- vector()
}
results
h <-  as.data.frame(table(filter(spamJoin, type=="ham")))
h <- h[order(-h$Freq), , drop=FALSE]
h[1:10,]
h <-  as.data.frame(table(filter(spamJoin, type=="ham")))
spam <- read.csv(str_c(dirname(getwd()), "/visualAnalytics/Data/spam.csv"))
nrow(filter(spam, spam$type=="ham"))
nrow(filter(spam, spam$type=="spam"))
spam <- mutate(spam, text=as.character(text))
spam <- spam %>%
tidytext::unnest_tokens(word, text)
spamJoin <- spam %>%
anti_join(tidytext::stop_words, by = "word")
h <-  as.data.frame(table(filter(spamJoin, type=="ham")))
h <- h[order(-h$Freq), , drop=FALSE]
h[1:10,]
h <- filter(h, Freq>1)
dtm <- data.frame(row.names = 1:5572)
for(i in 1:nrow(h)){
dtm <- cbind(dtm,FALSE)
}
View(dtm)
names(dtm) <- h[,2]
View(spam)
spam <- read.csv(str_c(dirname(getwd()), "/visualAnalytics/Data/spam.csv"))
nrow(filter(spam, spam$type=="ham"))
nrow(filter(spam, spam$type=="spam"))
spam <- mutate(spam, text=as.character(text))
spam <- spam %>%
tidytext::unnest_tokens(word, text)
spamJoin <- spam %>%
anti_join(tidytext::stop_words, by = "word")
h <-  as.data.frame(table(filter(spamJoin, type=="ham")))
h <- h[order(-h$Freq), , drop=FALSE]
h[1:10,]
s <-  as.data.frame(table(filter(spamJoin, type=="spam")))
s <- s[order(-s$Freq), , drop=FALSE]
s[1:10,]
spamspam <- filter(spam, type=="spam")
spamham <- filter(spam, type=="ham")
training <- spamspam[(1:round(nrow(spamspam)*0.7)),]
training <- rbind(training, spamham[(1:round(nrow(spamham)*0.7)),])
test <- spamspam[((round(nrow(spamspam)*0.7))+1):nrow(spamspam),]
test <- rbind(test, spamham[((round(nrow(spamham)*0.7))+1):nrow(spamham),])
spamspam <- filter(spam, type=="spam")
spamham <- filter(spam, type=="ham")
training <- spamspam[(1:round(nrow(spamspam)*0.7)),]
training <- rbind(training, spamham[(1:round(nrow(spamham)*0.7)),])
test <- spamspam[((round(nrow(spamspam)*0.7))+1):nrow(spamspam),]
test <- rbind(test, spamham[((round(nrow(spamham)*0.7))+1):nrow(spamham),])
#create data partition function
bayes <- e1071::naiveBayes(training, training$type)
pred <- predict(bayes, test$type)
confusionMatrix(pred, reference=test$type)
confusionMatrix(pred, reference=test$type, positive = spam)
confusionMatrix(pred, reference=test$type, positive = "spam"")
confusionMatrix(pred, reference=test$type, positive = "spam")
confusionMatrix(pred, reference=test$type)
votes <- readRDS(str_c(dirname(getwd()), "/visualAnalytics/Data/UNVotes.rds"))
2014-1946
plot(1946:2015, a, type = "l")
max(a)
1946+which(a == max(a))-1
0
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
2014-1946
plot(1946:2015, a, type = "l")
a <- 0
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
a <- vector()
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
2014-1946
plot(1946:2014, a, type = "l")
max(a)
1946+which(a == max(a))-1
votes <- readRDS(str_c(dirname(getwd()), "/visualAnalytics/Data/UNVotes.rds"))
a <- vector()
for(i in (1946:2014)){
a <- c(a,nrow(filter(votes, grepl(i,date))))
}
plot(1946:2014, a, type = "l")
max(a)
1946+which(a == max(a))-1
us <- filter(votes, country=="United States of America")
ger <- filter(votes, country=="Federal Republic of Germany" | country=="Germany")
tmp <- vector()
results <- vector()
for(i in 1973:2014){
currus <- filter(us, grepl(i,date))
currger <- filter(ger, grepl(i,date))
for(j in 1:nrow(currus)){
id <- as.numeric(currus[j,1])
tmp <- c(tmp,filter(currus, rcid==id)[1,3] == filter(currger, rcid==id)[1,3])
}
results <- c(results,length(which(tmp==TRUE))/nrow(currus))
tmp <- vector()
}
results
?spread
