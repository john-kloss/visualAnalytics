cluster <- function(){
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print(3)
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print(rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print("Next iteration", rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print("Next iteration"+ rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print(rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
plot(dat)
plot(dat$x, dat$y)
ggplot(dat$x, dat$y)
ggplot(dat, aes(x=x, y=y))
ggplot( aes(x=x, y=y))
ggplot(dat, aes(x=x, y=y))
ggplot(dat, aes(x=x, y=y)) + geom_bar(stat="identity")
ggplot(dat, aes(x=x, y=y)) + geom_bar( colour="#FF9999")
ggplot(dat, aes(x=x, y=y)) + geom_bar(stat="identity", colour="#FF9999")
ggplot(dat, aes(x=x, y=y)) + geom_point( colour="#FF9999")
ggplot(dat, aes(x=x, y=y)) + geom_point( colour=cluster)
ggplot(dat, aes(x=x, y=y)) + geom_point( colour=cluster)
ggplot(dat, aes(x=x, y=y)) + geom_point( colour="#FF9999")
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour="#FF9999"))
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster))
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3)
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) + scale_fill_brewer(palette="Spectral")
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) + scale_color_brewer(palette="Spectral")
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) + scale_color_brewer(values=c("red", "blue", "green"))
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) + scale_colour_brewer(values=c("red", "blue", "green"))
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) + scale_colour_manual(values=c("red", "blue", "green"))
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) + scale_fill_manual(values=c("red", "blue", "green"))
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) +  scale_colour_gradientn(colours=rainbow(4))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print(rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) +  scale_colour_gradientn(colours=rainbow(4))
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print(rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) +  scale_colour_gradientn(colours=rainbow(4))
# Lösung zu Aufgabe 2...
student <- read_csv(str_c(dirname(getwd()), "/visualAnalytics/Data/clustering-student-mat.csv"))
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
plt<-ggplot(student, aes(Exam1, Exam2, color = cluster,
fill = cluster))+
geom_point()
print(plt)
}
# Lösung zu Aufgabe 3...
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
#windows()
plot(si)
}
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
# Lösung zu Aufgabe 3...
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
#windows()
plot(si)
}
install.packages("silhouette")
silhouette
silhouette()
install.packages("cluster")
library(cluster)
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
#windows()
plot(si)
}
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
windows()
plot(si)
}
window()
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
window()
plot(si)
}
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
window(si)
plot(si)
}
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
windows(si)
plot(si)
}
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
window(si)
plot(si)
}
?window
windows.ts(si)
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
window(si)
plot(si)
}
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
window()
plot(si)
}
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
window(si)
plot(si)
}
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
window(clust)
plot(si)
}
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.90, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
View(dm)
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.90, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.90, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
hc <- hclust(dm, method = "single")
library(ggdendro)
install.packages("ggdendro")
library(ggdendro)
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.90, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
hc <- hclust(dm, method = "single")
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.90, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
hc <- hclust(dm, method = "single")
knitr::kable(dm)
hc <- hclust(dm, method = "single")
d_sl <- ggdendrogram(hc, rotate = F, size = 2)
?hclust
hc <- hclust(dm, method = "complete")
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.00, 0.00, 0.0, 0.0,
0.02, 0.00, 0.0, 0.0, 0.0,
0.90, 0.65, 0.00, 0.0, 0.0,
0.36, 0.15, 0.59, 0.0, 0.0,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
hc <- hclust(dm, method = "single")
knitr::kable(dm)
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.90, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.00, 0.00, 0.00, 0.00,
0.02, 0.00, 0.00, 0.00, 0.00,
0.90, 0.65, 0.00, 0.00, 0.00,
0.36, 0.15, 0.59, 0.00, 0.00,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
hc <- hclust(dm, method = "single")
as.dist(dm)
hc <- hclust(as.dist(dm), method = "single")
d_sl <- ggdendrogram(hc, rotate = F, size = 2)
d_sl <- ggdendrogram(hc, rotate = F, size = 2)
library(ggdendro)
hc <- hclust(as.dist(dm), method = "single")
d_sl <- ggdendrogram(hc, rotate = F, size = 2)
d_sl
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.00, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
library(ggdendro)
hc <- hclust(as.dist(dm), method = "single")
d_sl <- ggdendrogram(hc, rotate = F, size = 2)
d_sl
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.00, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
library(ggdendro)
hc <- hclust(as.dist(dm), method = "single")
d_sl <- ggdendrogram(hc, rotate = F, size = 2)
d_sl
clust<-kmeans(student,centers=j)
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
#window(si)
plot(si)
}
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgeführt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(tidyverse)
library(stringr)
library(magrittr)
library(dplyr)
library(fields)
dat <- tibble(
x = c(2.0, 2.0, 2.0, 2.5, 2.5, 3.0, 4.0, 4.0, 4.5, 4.5, 4.5 , 4.5),
y = c(1.0, 1.5, 2.0, 1.0, 2.0, 4.0, 1.0, 2.5, 1.0, 1.5, 2.5 , 3.0)
)
# Lösung zu Aufgabe 1...
#create inital centers
centers<- dat[1:3,1:2]
curCenters <- dat[2:4,1:2]
while(!isTRUE(all.equal(curCenters, centers))){
curCenters <- centers
print(rdist(centers, dat))
dat <- mutate(dat,cluster=(apply(rdist(centers, dat),2,which.min)))
for(i in 1:3){
current <- filter(dat, cluster==i)
centers[i,1] <- sum(current$x)/nrow(current)
centers[i,2] <- sum(current$y)/nrow(current)
}
}
ggplot(dat, aes(x=x, y=y)) + geom_point( aes(colour=cluster), size=3) +  scale_colour_gradientn(colours=rainbow(4))
# Lösung zu Aufgabe 2...
student <- read_csv(str_c(dirname(getwd()), "/visualAnalytics/Data/clustering-student-mat.csv"))
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
plt<-ggplot(student, aes(Exam1, Exam2, color = cluster,
fill = cluster))+
geom_point()
print(plt)
}
View(student)
# Lösung zu Aufgabe 3...
library(cluster)
k<-c(2:8)
for (j in k){
clust<-kmeans(student,centers=j)
student<-student %>% mutate(cluster = factor(clust$cluster))
si <- silhouette(clust$cluster, dist(student))
#window(si)
plot(si)
}
